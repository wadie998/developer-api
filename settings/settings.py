"""
Django settings for django-template-app project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os

from settings.configs.elastic_apm_config import ELASTIC_APM_CONFIG
from settings.configs.env import BASE_DIR, config
from settings.configs.logging_config import LOGGING
from settings.configs.sqlite_config import SQLITE3_CONFIG

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

DJANGO_SERVICE_VERSION = "Flouci v1.0.0"

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# Logs Notification
GC_LOGS_CRONJOBS_CHANNEL_WEBHOOK = config("GC_LOGS_CRONJOBS_CHANNEL_WEBHOOK", default="")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)

ALLOWED_HOSTS = ["*"]
CSRF_TRUSTED_ORIGINS = config("CSRF_TRUSTED_ORIGINS", default="https://*.flouci.com").split(",")

ADMIN_ENABLED = config("ADMIN_ENABLED", default=True, cast=bool)

# Application definition
INSTALLED_APPS = []
if ADMIN_ENABLED:
    INSTALLED_APPS = [
        "django.contrib.admin",
    ]

INSTALLED_APPS += [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_api_key",
    "django_otp",
    "django_otp.plugins.otp_totp",
    "health_check",
    "health_check.db",
    "health_check.contrib.migrations",
    "drf_spectacular",
    "api",
    "partners",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_otp.middleware.OTPMiddleware",
]

ROOT_URLCONF = "settings.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "settings.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# REST FRAMEWORK
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": ("rest_framework.authentication.SessionAuthentication",),
    "DEFAULT_METADATA_CLASS": None,
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "EXCEPTION_HANDLER": "utils.custom_exception_handlers.drf_custom_exception_handler",
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

SPECTACULAR_SETTINGS = {
    "TITLE": "Flouci Developers API",
    "DESCRIPTION": "Flouci Developers APIs",
    "VERSION": "2.0.0",
    "SERVE_PERMISSIONS": ["rest_framework.permissions.AllowAny"],
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Africa/Tunis"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

if DEBUG is False:
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
else:
    STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

if config("POSTGRESQL_ENABLED", default=True, cast=bool):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": config("DB_NAME"),
            "USER": config("DB_USER"),
            "PASSWORD": config("DB_PASSWORD"),
            "HOST": config("DB_ADDRESS"),
            "PORT": config("DB_PORT"),
        }
    }
    if config("OLD_DATABASE_ENABLED", default=False, cast=bool):
        DATABASES["old_db"] = {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": config("OLD_DB_NAME"),
            "USER": config("OLD_DB_USER"),
            "PASSWORD": config("OLD_DB_PASSWORD"),
            "HOST": config("OLD_DB_ADDRESS"),
            "PORT": config("OLD_DB_PORT"),
        }
else:
    DATABASES = SQLITE3_CONFIG


# Adjustments for environment-enabled logging
# Check configs in log config
# LOGGING

if config("ELASTIC_APM_ENABLED", default=True, cast=bool):
    ELASTIC_APM = ELASTIC_APM_CONFIG
    LOGGING["handlers"]["elasticapm"] = {
        "level": "ERROR",
        "class": "elasticapm.contrib.django.handlers.LoggingHandler",
    }
    LOGGING["loggers"][""]["handlers"].append("elasticapm")
    INSTALLED_APPS.append("elasticapm.contrib.django")
    MIDDLEWARE.append("elasticapm.contrib.django.middleware.TracingMiddleware")


ADMIN_ENABLED = config("ADMIN_ENABLED", default=True, cast=bool)
ADMIN_TWO_FA_ENABLED = config("ADMIN_TWO_FA_ENABLED", default=False, cast=bool)


# FLOUCI BACKEND
FLOUCI_BACKEND_API_ADDRESS = config("FLOUCI_BACKEND_API_ADDRESS", default="")
FLOUCI_BACKEND_API_KEY = config("FLOUCI_BACKEND_API_KEY", default="")
FLOUCI_BACKEND_INTERNAL_API_KEY = config("FLOUCI_BACKEND_INTERNAL_API_KEY", default="")

# Data API:
DATA_API_ADDRESS = config("DATA_API_ADDRESS", default="")
DATA_API_PASSWORD = config("DATA_API_PASSWORD", default="")
DATA_API_USERNAME = config("DATA_API_USERNAME", default="")

# WEBHOOK FROM SEND MONEY
CASH_IO_VERIFICATION_TOKEN = config("CASH_IO_VERIFICATION_TOKEN", default="")
DEVELOPER_API_INTERNAL_ADDRESS = config("DEVELOPER_API_INTERNAL_ADDRESS", default="")

# GCS
GCS_BUCKET_NAME = config("GCS_BUCKET_NAME", default="kaoun-flouci-developers-api-internal")
GCS_BASE_DIR_NAME = config("GCS_BASE_DIR_NAME", default="developers-api-app-images")
