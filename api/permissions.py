import uuid

from django.core.exceptions import ObjectDoesNotExist
from rest_framework.permissions import BasePermission

from api.models import App
from utils.jwt_helpers import verify_backend_token, verify_jhipster_token


class IsFlouciAuthenticated(BasePermission):
    """
    has a valid jwt generated by backend
    """

    def has_permission(self, request, view):
        token = request.META.get("HTTP_AUTHORIZATION")
        if not token or not token.startswith("Bearer "):
            return False
        token = token.split(" ")[1]  # Extract the token part after "Bearer "
        verified, data = verify_backend_token(token)
        if not verified:
            return False
        for key, value in data.items():
            setattr(request, key, value)
        return True


class IsJHipsterAuthenticated(BasePermission):
    """
    has a valid jwt generated by JHipster
    """

    def has_permission(self, request, view):
        token = request.META.get("HTTP_AUTHORIZATION")
        if not token or not token.startswith("Bearer "):
            return False
        token = token.split(" ")[1]  # Extract the token part after "Bearer "
        verified, data = verify_jhipster_token(token)
        if not verified:
            return False
        for key, value in data.items():
            setattr(request, key, value)
        request.is_jhipster_authenticated = True
        return True


class HasValidAppCredentials(BasePermission):
    """
    Validates the app credentials and returns the application to the view
    """

    def has_permission(self, request, view):
        app_token = request.headers.get("App-Token")
        app_secret = request.headers.get("App-Secret")
        if not app_token or not app_secret:
            return False
        try:
            uuid.UUID(app_token)
            uuid.UUID(app_secret)
            # TODO check if we want to use deleted or other metrics
            application = App.objects.get(public_token=app_token, private_token=app_secret, active=True)
            request.application = application
            return True
        except (ObjectDoesNotExist, ValueError):
            return False
