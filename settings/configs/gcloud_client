import json

from gcloud import storage
from oauth2client.service_account import ServiceAccountCredentials

from settings.settings import GCLOUD_SERVICE_ACCOUNT_CREDENTIALS_FILE_PATH


class GcloudStorageClient:
    __instance = None

    @staticmethod
    def getInstance():
        """Static access method."""
        if GcloudStorageClient.__instance is None:
            GcloudStorageClient()
        return GcloudStorageClient.__instance

    def __init__(self):
        """Virtually private constructor."""
        if GcloudStorageClient.__instance is not None:
            raise Exception("This class is a GcloudStorageClient!")
        else:
            self.client = storage.Client(
                credentials=ServiceAccountCredentials.from_json_keyfile_name(
                    GCLOUD_SERVICE_ACCOUNT_CREDENTIALS_FILE_PATH
                ),
                project=json.load(open(GCLOUD_SERVICE_ACCOUNT_CREDENTIALS_FILE_PATH))["project_id"],
            )

            GcloudStorageClient.__instance = self

    def upload_object(self, bucket, blobname, data):
        bucket = self.client.get_bucket(bucket)
        blob = bucket.blob(blobname)
        blob.upload_from_string(data)

    def delete_object(self, bucket, blobname):
        bucket = self.client.get_bucket(bucket)
        blob = bucket.blob(blobname)
        blob.delete()
