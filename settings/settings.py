"""
Django settings for django-template-app project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
import sys
from pathlib import Path

from decouple import AutoConfig, config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

ENV = os.environ.get("ENV", None)


if ENV:
    config = AutoConfig("/run/secrets")  # noqa: F811

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = config("SECRET_KEY")
"""JWT"""
BACKEND_JWT_PUBLIC_KEY = config("BACKEND_JWT_PUBLIC_KEY", cast=lambda key: bytes(key.replace("\\n", "\n"), "utf-8"))
JWT_PROJECT_PRIVATE_KEY = config(
    "JWT_PROJECT_PRIVATE_KEY", cast=lambda key: bytes(key.replace("\\n", "\n"), "utf-8"), default=""
)
JWT_PROJECT_PUBLIC_KEY = config(
    "JWT_PROJECT_PUBLIC_KEY", cast=lambda key: bytes(key.replace("\\n", "\n"), "utf-8"), default=""
)
PROJECT_VERIFICATION_TOKEN = config("PROJECT_VERIFICATION_TOKEN", default="")

# Logs Notification
GC_LOGS_CRONJOBS_CHANNEL_WEBHOOK = config("GC_LOGS_CRONJOBS_CHANNEL_WEBHOOK", default="")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_api_key",
    "health_check",
    "health_check.db",
    "health_check.contrib.migrations",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "settings.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "settings.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Africa/Tunis"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


if config("POSTGRESQL_ENABLED", default=False, cast=bool):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": config("DB_NAME"),
            "USER": config("DB_USER"),
            "PASSWORD": config("DB_PASSWORD"),
            "HOST": config("DB_ADDRESS"),
            "PORT": config("DB_PORT"),
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

if ENV:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "filters": {
            "health_check": {"()": "settings.logging.custom_gunicorn_logger.HealthCheckFilter"},
        },
        "formatters": {
            "verbose": {"format": "%(levelname)s File %(pathname)s, line %(lineno)d, %(message)s"},
        },
        "handlers": {
            "console": {
                "level": "INFO",
                "class": "logging.StreamHandler",
                "formatter": "verbose",
                "stream": sys.stdout,
            },
            "mail_admins": {
                "level": "ERROR",
                "class": "settings.logging.custom_admin_email_handler.CustomAdminEmailHandler",
                "include_html": False,
                "filters": ["health_check"],
            },
            "critical_mail": {
                "level": "CRITICAL",
                "class": "settings.logging.custom_admin_email_handler.CustomAdminEmailHandler",
                "include_html": False,
            },
        },
        "loggers": {
            "": {
                "handlers": ["console", "critical_mail"],
                "level": "INFO",
                "propagate": True,
            },
            "django.request": {
                "handlers": ["mail_admins"],
                "level": "ERROR",
                "propagate": True,
            },
        },
    }
else:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "verbose": {"format": "%(levelname)s File %(pathname)s, line %(lineno)d, %(message)s"},
        },
        "handlers": {
            "console": {
                "level": "DEBUG",
                "class": "logging.StreamHandler",
                "formatter": "verbose",
            },
            "mail_admins": {
                "level": "ERROR",
                "class": "settings.logging.custom_admin_email_handler.CustomAdminEmailHandler",
            },
        },
        "loggers": {
            "": {
                "handlers": ["console"],
                "level": "INFO",
                "propagate": True,
            },
            "django.request": {
                "handlers": ["mail_admins"],
                "level": "ERROR",
                "propagate": False,
            },
        },
    }


if config("ELASTIC_APM_ENABLED", default=True, cast=bool):
    ELASTIC_APM = {
        "SERVICE_NAME": config("ELASTIC_APM_SERVICE_NAME", default="django-template-app"),
        "SECRET_TOKEN": config("ELASTIC_APM_SECRET_TOKEN", default=None),
        "API_KEY": config("ELASTIC_APM_API_KEY", default=None),
        "SERVER_URL": config("ELASTIC_APM_ADDRESS"),
        "ENVIRONMENT": ENV,
        # show url instead of views
        "DJANGO_TRANSACTION_NAME_FROM_ROUTE": True,
        "TRANSACTIONS_IGNORE_PATTERNS": ["GET api/ht/?"],
        "ENABLED": config("ELASTIC_APM_ENABLED", default=True, cast=bool),
        "METRICS_INTERVAL": config("ELASTIC_APM_METRICS_INTERVAL", default="2m"),
        "DISABLE_METRICS": config("ELASTIC_APM_DISABLE_METRICS", default=None),
        "CENTRAL_CONFIG": config("ELASTIC_APM_CENTRAL_CONFIG", default=False, cast=bool),
    }
    LOGGING["handlers"]["elasticapm"] = {
        "level": "ERROR",
        "class": "elasticapm.contrib.django.handlers.LoggingHandler",
    }
    LOGGING["loggers"][""]["handlers"].append("elasticapm")
    INSTALLED_APPS.append("elasticapm.contrib.django")
    MIDDLEWARE.append("elasticapm.contrib.django.middleware.TracingMiddleware")

"""
Redis database parameters
"""
REDIS_ENABLED = config("REDIS_ENABLED", default=False, cast=bool)
if REDIS_ENABLED:
    INSTALLED_APPS += ["health_check.contrib.redis"]
    REDIS_PORT = str(config("REDIS_PORT", cast=int, default=6379))
    REDIS_ADDRESS = config("REDIS_ADDRESS")
    REDIS_DB = config("REDIS_DB", cast=int, default=0)
    if config("REDIS_SENTINEL_ENABLED", default=False, cast=bool):
        REDIS_SENTINEL_ADDRESS = config(
            "REDIS_SENTINEL_ADDRESS",
            cast=lambda v: [(i[0], int(i[1])) for i in [(s.strip().split(":")) for s in v.split(",")]],
        )
        DJANGO_REDIS_CONNECTION_FACTORY = "django_redis.pool.SentinelConnectionFactory"
        CACHES = {
            "default": {
                "BACKEND": "django_redis.cache.RedisCache",
                "LOCATION": [
                    f"redis://{REDIS_ADDRESS}:{REDIS_PORT}/{REDIS_DB}",
                ],
                "OPTIONS": {
                    "CLIENT_CLASS": "django_redis.client.SentinelClient",
                    "PASSWORD": config("REDIS_PASSWORD", default=None),
                    "PARSER_CLASS": "redis.connection.HiredisParser",
                    "CONNECTION_POOL_CLASS": "redis.sentinel.SentinelConnectionPool",
                    "SENTINELS": REDIS_SENTINEL_ADDRESS,
                    "SENTINEL_KWARGS": {"password": config("REDIS_SENTINEL_PASSWORD", default=None)},
                    "CONNECTION_POOL_CLASS_KWARGS": {
                        "max_connections": 300,
                        "timeout": 20,
                    },
                    "MAX_CONNECTIONS": 2000,
                    "PICKLE_VERSION": -1,
                },
                "KEY_PREFIX": "backend",
            },
        }
        # healtcheck doesn't support redis sentinel
        if "health_check.contrib.redis" in INSTALLED_APPS:
            INSTALLED_APPS.remove("health_check.contrib.redis")
    else:
        CACHES = {
            "default": {
                "BACKEND": "django_redis.cache.RedisCache",
                "LOCATION": [
                    f"redis://{REDIS_ADDRESS}:{REDIS_PORT}/{REDIS_DB}",
                ],
                "OPTIONS": {
                    "DB": REDIS_DB,
                    "PASSWORD": config("REDIS_PASSWORD", default=None),
                    "PARSER_CLASS": "redis.connection.HiredisParser",
                    "CONNECTION_POOL_CLASS": "redis.BlockingConnectionPool",
                    "CONNECTION_POOL_CLASS_KWARGS": {
                        "max_connections": 100,
                        "timeout": 30,
                    },
                    "MAX_CONNECTIONS": 2000,
                    "PICKLE_VERSION": -1,  # Use the latest protocol version
                },
                "KEY_PREFIX": "backend",
            },
        }
        REDIS_URL = f"redis://{REDIS_ADDRESS}:{REDIS_PORT}"
else:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
            "LOCATION": config("CACHE_FILE_LOCATION", default="/tmp/django_cache"),
        }
    }
    # For running redis labs instances: https://app.redislabs.com/#/sign-up
