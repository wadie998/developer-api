from rest_framework.permissions import BasePermission

from settings.configs.jwt_config import PROJECT_VERIFICATION_TOKEN
from utils.jwt_helpers import verify_backend_token, verify_token
from utils.signature_manager import signed_request_is_valid


class IsBackendAuthenticated(BasePermission):
    """
    has a valid jwt generated by backend
    """

    def has_permission(self, request, view):
        token = request.META.get("HTTP_AUTHORIZATION")
        if not token or not token.startswith("Bearer "):
            return False
        token = token.split(" ")[1]  # Extract the token part after "Bearer "
        verified, data = verify_backend_token(token)
        if not verified:
            return False
        for key, value in data.items():
            setattr(request, key, value)
        return True


class IsAuthenticated(BasePermission):
    """
    has a valid jwt generated by base project
    """

    def has_permission(self, request, view):
        token = request.META.get("HTTP_AUTHORIZATION")
        if not token or not token.startswith("Bearer "):
            return False
        token = token.split(" ")[1]  # Extract the token part after "Bearer "
        verified, data = verify_token(token)
        if not verified:
            return False
        for key, value in data.items():
            setattr(request, key, value)
        return True


class HasValidSignature(BasePermission):
    """
    Has a valid signature
    """

    def has_permission(self, request, view):
        # For most webhook catchers we use this
        if signed_request_is_valid(request, PROJECT_VERIFICATION_TOKEN):
            return True
        return False


class HasJhipsterKey(BasePermission):
    """
    Has a valid Jhipster Key
    """

    def has_permission(self, request, view):
        token = request.META.get("HTTP_API_KEY")
        if not token:
            return False
        return token == "JHIPSTER_API_KEY"
