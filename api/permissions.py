import hmac
from hashlib import sha256

from rest_framework.permissions import BasePermission

from settings.settings import PROJECT_VERIFICATION_TOKEN
from utils.jwt_helpers import verify_backend_token, verify_token


class IsBackendAuthenticated(BasePermission):
    """
    has a valid jwt generated by backend
    """

    def has_permission(self, request, view):
        token = request.META.get("HTTP_AUTHORIZATION")
        verified, data = verify_backend_token(token)
        if not verified:
            return False
        for key, value in data.items():
            setattr(request, key, value)
        return True


class IsAuthenticated(BasePermission):
    """
    has a valid jwt generated by base project
    """

    def has_permission(self, request, view):
        token = request.META.get("HTTP_AUTHORIZATION")
        verified, data = verify_token(token)
        if not verified:
            return False
        for key, value in data.items():
            setattr(request, key, value)
        return True


class HasValidSignature(BasePermission):
    """
    Has a valid signature
    """

    def has_permission(self, request, view):
        # For most webhook catchers we use this
        if signed_request_is_valid(request, PROJECT_VERIFICATION_TOKEN):
            return True
        return False


def signed_request_is_valid(request, secret):
    """Validate signed requests."""
    api_signature = request.META.get("HTTP_SIGNATURE")
    if api_signature:
        request_check_field = request.data.get("id")
        if request_check_field is None:
            return False
        signature = generate_request_signature(secret, request.method, request.path, request_check_field)
        return signature == api_signature
    else:
        return False


def generate_request_signature(secret, request_method, request_path, request_check_field):
    params = [secret, request_method, request_path, request_check_field]
    formatted_data = "-".join(params)
    formatted_data = formatted_data.encode("utf-8")
    return hmac.new(secret.encode("utf-8"), msg=formatted_data, digestmod=sha256).hexdigest()
